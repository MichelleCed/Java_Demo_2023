# This is a basic workflow to help you understan how to integrate some Veracode analysis with Actions

name: Veracode_GitHub_Actions

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - 'featureX'
      - 'dev'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Clean output directory
      - name: Clean Output Directory
        run: mvn -B clean

      #Setting Java
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'

      # Build the project by using Maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: ls ./target

      - name: Branch name
        run: |
          echo 'Nombre del branch - '${{ github.ref_name }}
          echo ${{ github.ref_name }} == 'featureX'

      # Runs Veracode Pipeline Scan
      - name: VERACODE SAST - PIPELINE SCAN
        if: ${{ success() && github.ref_name == 'featureX' }}
        env:
          VID: ${{ SECRETS.VID }}
          VKEY: ${{ SECRETS.VKEY }}
          REPO_URL: https://github.com/${{ GITHUB.REPOSITORY }}
        run: |
          echo '[INFO] --- Veracode SAST - Pipeline Scan'
          echo '[INFO] --- Downloading Pipeline Scan (Latest Version)...'
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip pipeline-scan-LATEST.zip
          echo '[INFO] --- Starting Pipeline Scan execution...'
          java -jar pipeline-scan.jar -vid $VID -vkey $VKEY --file target/verademo.war --project_name $GITHUB_REPOSITORY --project_url $REPO_URL -so true
          STATUS=${?}        
          if [ $STATUS -gt 0 ];
          then
            echo '[INFO] --- Pipeline Scan has finished.'
            echo '[INFO] --- ' $STATUS ' flaws were found.'
            exit 1 #This exit code makes the pipeline breaks. Remove this line if you need the pipeline continues its execution
          elif [ $STATUS -lt 0 ];
          then
            echo '[INFO] --- Pipeline Scan could not be executed...There are some errors...'
            echo '[INFO] --- ' $STATUS
            exit 1 #This exit code makes the pipeline breaks. Remove this line if you need the pipeline continues its execution
          fi

      # Runs Veracode Sandbox Scan
      - name: VERACODE SAST - SANDBOX SCAN
        if: ${{ success() && github.ref_name == 'dev' }}
        env:
          VID: ${{ SECRETS.VID }}
          VKEY: ${{ SECRETS.VKEY }}
          REPO_URL: https://github.com/${{ GITHUB.REPOSITORY }}
        run: |
          echo 'FUNCIONO EL SANDBOX!'

