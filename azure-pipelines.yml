# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
 branches:
   include:
   - refs/heads/master
   - refs/heads/dev
   - refs/heads/featureX

pool:
  vmImage: 'ubuntu-latest'

stages:
# In Veracode Stage it will execute Pipeline Scan or Sandbox Scan or Policy Scan depending on the branch under execution, which could be
# 'featureX' or 'dev' or 'master' respectively.
- stage: Veracode

  jobs:
  - job: Build

    steps:
    
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'package' # Optional
        options: # Optional
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml' # Required when publishJUnitResults == True
        testRunTitle: # Optional
        codeCoverageToolOption: 'None' # Optional. Options: none, cobertura, jaCoCo. Enabling code coverage inserts the `clean` goal into the Maven goals list when Maven runs.
        codeCoverageClassFilter: # Optional. Comma-separated list of filters to include or exclude classes from collecting code coverage. For example: +:com.*,+:org.*,-:my.app*.*
        codeCoverageClassFilesDirectories: # Optional
        codeCoverageSourceDirectories: # Optional
        codeCoverageFailIfEmpty: false # Optional
        javaHomeOption: 'JDKVersion' # Options: jDKVersion, path
        jdkVersionOption: 'default' # Optional. Options: default, 1.11, 1.10, 1.9, 1.8, 1.7, 1.6
        jdkDirectory: # Required when javaHomeOption == Path
        jdkArchitectureOption: 'x64' # Optional. Options: x86, x64
        mavenVersionOption: 'Default' # Options: default, path
        mavenDirectory: # Required when mavenVersionOption == Path
        mavenSetM2Home: false # Required when mavenVersionOption == Path
        mavenOptions: '-Xmx1024m' # Optional
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
        sqMavenPluginVersionChoice: 'latest' # Required when sonarQubeRunAnalysis == True# Options: latest, pom
        checkStyleRunAnalysis: false # Optional
        pmdRunAnalysis: false # Optional
        findBugsRunAnalysis: false # Optional

    - task: CmdLine@2
      displayName: Pipeline Scan
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/featureX'))
      inputs:
        script: |
          echo '[INFO] --- Veracode SAST - Pipeline Scan'
          SIZE_PACKAGE=$(ls -l target/verademo.war | cut -d " " -f5)
          if [ $SIZE_PACKAGE -le 100000000 ];
          then
            echo '[INFO] --- Size Package is less than or equal to 100MB....Pipeline Scan can be executed'
            echo '[INFO] --- Downloading Pipeline Scan (Latest Version)...'
            curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
            unzip pipeline-scan-LATEST.zip
            echo '[INFO] --- Starting Pipeline Scan execution...'
            java -Dpipeline.debug=true -jar pipeline-scan.jar -vid $(VID) -vkey $(VKEY) --file target/verademo.war --project_name $(System.TeamProject) --project_url $(Build.BuildUri) -so true --issue_details true
            STATUS=${?}            
            if [ $STATUS -gt 0 ];
            then
              echo '[INFO] --- Pipeline Scan has finished.'
              echo '[INFO] --- ' $STATUS ' flaws were found.'
              exit 1
            fi
          else
            echo '[INFO] --- Size Package is greater than 100MB....Pipeline Scan cannot be executed'
          fi

    - task: CmdLine@2
      displayName: Sandbox Scan
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/dev'))
      inputs:
        script: |
          echo '[INFO] --- Veracode SAST - Sandbox Scan'

    - task: CmdLine@2
      displayName: Policy Scan
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      inputs:
        script: |
          echo '[INFO] --- Veracode SAST - Policy Scan'

